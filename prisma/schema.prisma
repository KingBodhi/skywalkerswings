generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(EDITOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Collection {
  id          String              @id @default(cuid())
  title       String
  handle      String              @unique
  description String?
  heroImage   String?
  status      Status              @default(ACTIVE)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  products    CollectionProduct[]
}

model Product {
  id          String              @id @default(cuid())
  title       String
  handle      String              @unique
  description String
  status      Status              @default(ACTIVE)
  metadata    String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  collections CollectionProduct[]
  images      ProductImage[]
  variants    Variant[]
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String?
  sort      Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Variant {
  id         String          @id @default(cuid())
  productId  String
  sku        String          @unique
  price      Int
  compareAt  Int?
  color      String?
  size       String?
  weightG    Int?
  dims       String?
  isDefault  Boolean         @default(false)
  cartItems  CartItem[]
  inventory  InventoryLevel?
  orderItems OrderItem[]
  product    Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model InventoryLevel {
  id        String  @id @default(cuid())
  variantId String  @unique
  location  String  @default("default")
  quantity  Int     @default(0)
  reserved  Int     @default(0)
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
}

model CollectionProduct {
  productId    String
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, collectionId])
}

model Cart {
  id         String     @id @default(cuid())
  email      String?
  attributes String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  items      CartItem[]
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  variantId String
  qty       Int     @default(1)
  price     Int
  metadata  String?
  variant   Variant @relation(fields: [variantId], references: [id])
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

model Order {
  id        String      @id @default(cuid())
  email     String
  status    String      @default("PENDING")
  total     Int         @default(0)
  tax       Int         @default(0)
  shipping  Int         @default(0)
  paymentId String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  variantId String
  qty       Int
  price     Int
  title     String
  sku       String
  variant   Variant @relation(fields: [variantId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model BlogPost {
  id            String    @id @default(cuid())
  title         String
  slug          String    @unique
  excerpt       String?
  content       String
  category      String?
  readTime      String?
  featuredImage String?
  status        Status    @default(DRAFT)
  author        String    @default("WillRise Team")
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model JobPosting {
  id               String    @id @default(cuid())
  title            String
  slug             String    @unique
  department       String
  location         String?
  type             JobType   @default(FULL_TIME)
  salaryRange      String?
  description      String?
  requirements     String?
  responsibilities String?
  benefits         String?
  status           JobStatus @default(DRAFT)
  publishedAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

enum Role {
  ADMIN
  EDITOR
  CUSTOMER
  DISTRIBUTOR
}

enum Status {
  ACTIVE
  INACTIVE
  DRAFT
  ARCHIVED
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  REMOTE
}

enum JobStatus {
  DRAFT
  ACTIVE
  CLOSED
}
